class TapMergeGame{constructor(){this.score=0;this.coins=0;this.board=[];this.boardSize=12;this.elementTypes=["üçé","üçä","üçá","üçì","üçí","üçë"];this.doublePointsActive=false;this.lastTransactionId=null;this.init()}init(){this.loadGame();this.createBoard();this.bindEvents();this.render();this.updateUI();if(window.gameAnalytics){window.gameAnalytics.trackGameStart()}window.game=this;if(window.gameSecurity){this.sessionToken=window.gameSecurity.generateSecureToken();console.log("Secure session initialized")}}createBoard(){this.board=[];for(let i=0;i<this.boardSize;i++){this.board.push({id:i,type:Math.floor(Math.random()*this.elementTypes.length),level:1,merged:false})}}bindEvents(){document.getElementById("gameBoard").addEventListener("click",e=>{if(e.target.classList.contains("game-element")){const id=parseInt(e.target.dataset.id);this.handleElementClick(id)}});document.getElementById("resetBtn").addEventListener("click",()=>{this.resetGame();if(window.gameAnalytics){window.gameAnalytics.trackGameReset()}});document.getElementById("shopBtn").addEventListener("click",()=>{document.getElementById("shop").style.display="block"});document.getElementById("closeShop").addEventListener("click",()=>{document.getElementById("shop").style.display="none"});document.getElementById("upgradeBtn").addEventListener("click",()=>{this.purchaseUpgrade()});document.getElementById("adBtn").addEventListener("click",()=>{this.showAd()});document.getElementById("doublePointsBtn").addEventListener("click",()=>{this.purchaseDoublePoints()});document.getElementById("buyCoinsBtn").addEventListener("click",()=>{this.showPurchaseOptions()});document.getElementById("cryptoPaymentBtn").addEventListener("click",()=>{this.showCryptoPaymentOptions()});document.getElementById("exportAnalyticsBtn").addEventListener("click",()=>{if(window.gameAnalytics&&window.gameAnalytics.exportAnalytics){window.gameAnalytics.exportAnalytics()}});document.getElementById("securityTestBtn").addEventListener("click",()=>{this.testSecurity()})}handleElementClick(id){const element=this.board.find(el=>el.id===id);if(!element)return;if(window.gameAnalytics){window.gameAnalytics.trackElementTap(this.elementTypes[element.type],element.level)}const adjacentElements=this.getAdjacentElements(id);const sameTypeElements=adjacentElements.filter(el=>el.type===element.type&&el.level===element.level&&!el.merged);if(sameTypeElements.length>0){this.mergeElements(element,sameTypeElements);if(window.gameAnalytics){window.gameAnalytics.trackMerge(sameTypeElements.length,element.level)}}else{this.levelUpElement(element)}this.render();this.updateUI()}getAdjacentElements(id){const adjacent=[];const possibleAdjacent=[id-1,id+1];possibleAdjacent.forEach(adjId=>{if(adjId>=0&&adjId<this.boardSize){const element=this.board.find(el=>el.id===adjId);if(element)adjacent.push(element)}});return adjacent}mergeElements(baseElement,sameTypeElements){sameTypeElements.forEach(el=>{el.merged=true});baseElement.level+=1;const points=this.calculateScore(baseElement.level*10);this.score+=points;this.coins+=Math.floor(points/2);setTimeout(()=>{sameTypeElements.forEach(el=>{const index=this.board.findIndex(item=>item.id===el.id);if(index!==-1){this.board[index]={id:el.id,type:Math.floor(Math.random()*this.elementTypes.length),level:1,merged:false}}});this.render()},300)}levelUpElement(element){element.level+=1;const points=this.calculateScore(element.level*5);this.score+=points;this.coins+=element.level*2}render(){const gameBoard=document.getElementById("gameBoard");gameBoard.innerHTML="";this.board.forEach(element=>{if(!element.merged){const el=document.createElement("div");el.className=`game-element level-${element.level}`;el.dataset.id=element.id;el.textContent=this.elementTypes[element.type];gameBoard.appendChild(el)}})}updateUI(){document.getElementById("score").textContent=this.score;document.getElementById("coins").textContent=this.coins;document.getElementById("upgradeBtn").disabled=this.coins<50;document.getElementById("doublePointsBtn").disabled=this.coins<100;if(window.gameAnalytics){window.gameAnalytics.trackCoinBalance(this.coins);window.gameAnalytics.trackScore(this.score)}}saveGame(){const gameData={score:this.score,coins:this.coins,board:this.board,doublePointsActive:this.doublePointsActive,lastTransactionId:this.lastTransactionId};localStorage.setItem("tapMergeGame",JSON.stringify(gameData))}loadGame(){const savedGame=localStorage.getItem("tapMergeGame");if(savedGame){const gameData=JSON.parse(savedGame);this.score=gameData.score||0;this.coins=gameData.coins||0;this.board=gameData.board||[];this.doublePointsActive=gameData.doublePointsActive||false;this.lastTransactionId=gameData.lastTransactionId||null}}resetGame(){this.score=0;this.coins=0;this.doublePointsActive=false;this.lastTransactionId=null;this.createBoard();this.render();this.updateUI();this.saveGame()}purchaseUpgrade(){if(this.coins>=50){this.coins-=50;const points=this.calculateScore(10);this.score+=points;this.updateUI();this.saveGame();alert("Upgrade purchased! +"+points+" points");if(window.gameAnalytics){window.gameAnalytics.trackPurchase(50,"upgrade")}}else{this.showPurchaseOptions()}}showPurchaseOptions(){const options=[{coins:100,price:.99,description:"Small Pack"},{coins:500,price:4.99,description:"Medium Pack"},{coins:1e3,price:9.99,description:"Large Pack"}];let message="Purchase coins:\n";options.forEach((option,index)=>{message+=`${index+1}. ${option.description}: ${option.coins} coins for $${option.price}\n`});message+="Enter 1, 2, or 3 to select an option:";const choice=prompt(message,"1");if(choice){const index=parseInt(choice)-1;if(index>=0&&index<options.length){const selectedOption=options[index];if(window.paymentSystem){window.paymentSystem.processPayment(selectedOption.price,"paypal",`${selectedOption.coins} coins`).then(transaction=>{this.coins+=selectedOption.coins;this.lastTransactionId=transaction.id;this.updateUI();this.saveGame();alert(`Purchase successful! ${selectedOption.coins} coins added. Transaction ID: ${transaction.id}`);if(window.gameAnalytics){window.gameAnalytics.trackPurchase(selectedOption.price,`${selectedOption.coins}_coins`)}}).catch(error=>{alert("Payment failed: "+error.message)})}else{this.coins+=selectedOption.coins;this.updateUI();this.saveGame();alert(`Purchase successful! ${selectedOption.coins} coins added.`);if(window.gameAnalytics){window.gameAnalytics.trackPurchase(selectedOption.price,`${selectedOption.coins}_coins`)}}}else{alert("Invalid selection")}}}showCryptoPaymentOptions(){const options=[{coins:100,price:.99,description:"Small Pack"},{coins:500,price:4.99,description:"Medium Pack"},{coins:1e3,price:9.99,description:"Large Pack"}];let message="Purchase coins with cryptocurrency:\n";options.forEach((option,index)=>{message+=`${index+1}. ${option.description}: ${option.coins} coins for $${option.price}\n`});message+="Enter 1, 2, or 3 to select an option:";const choice=prompt(message,"1");if(choice){const index=parseInt(choice)-1;if(index>=0&&index<options.length){const selectedOption=options[index];const cryptoType=prompt("Enter cryptocurrency (bitcoin, ethereum, litecoin):","bitcoin");if(cryptoType){const walletAddress=prompt("Enter your wallet address:");if(walletAddress&&window.paymentSystem){window.paymentSystem.processCryptoPayment(selectedOption.price,cryptoType,walletAddress).then(result=>{alert(`Crypto payment initiated!\n${result.message}\n\nTransaction ID: ${result.transactionId}`);this.coins+=selectedOption.coins;this.lastTransactionId=result.transactionId;this.updateUI();this.saveGame();if(window.gameAnalytics){window.gameAnalytics.trackPurchase(selectedOption.price,`${selectedOption.coins}_coins_crypto`)}}).catch(error=>{alert("Crypto payment failed: "+error.message)})}else{alert("Wallet address is required for crypto payments")}}}else{alert("Invalid selection")}}}showAd(){alert("Showing advertisement... Watch to earn 20 coins!");this.coins+=20;this.updateUI();this.saveGame();if(window.gameAnalytics){window.gameAnalytics.trackAdWatched()}}purchaseDoublePoints(){if(this.coins>=100){this.coins-=100;this.doublePointsActive=true;const originalCalculateScore=this.calculateScore;this.calculateScore=basePoints=>basePoints*2;this.updateUI();this.saveGame();alert("Double points activated for 30 seconds!");if(window.gameAnalytics){window.gameAnalytics.trackPurchase(100,"double_points")}setTimeout(()=>{this.doublePointsActive=false;this.calculateScore=originalCalculateScore;this.updateUI();alert("Double points expired")},3e4)}else{alert("Not enough coins! Need 100 coins for double points.")}}calculateScore(basePoints){return basePoints}testSecurity(){if(!window.gameSecurity||!window.paymentSystem){alert("Security system not available");return}const testData={userId:"user123",action:"purchase_test",amount:1.99,timestamp:(new Date).toISOString()};const signature=window.gameSecurity.signTransaction(testData);const verification=window.gameSecurity.verifyTransaction(signature.signedData);let message="Security Test Results:\n\n";message+="Data signed successfully\n";message+="Signature: "+signature.hash.substring(0,16)+"...\n";message+="Verification: "+(verification.valid?"PASSED":"FAILED")+"\n";if(verification.valid){message+="Decoded data: "+JSON.stringify(verification.data,null,2)}else{message+="Error: "+verification.error}alert(message);const encoded=window.gameSecurity.secureBase64Encode(testData);const decoded=window.gameSecurity.secureBase64Decode(encoded);console.log("Security test - Original:",testData);console.log("Security test - Encoded:",encoded.substring(0,50)+"...");console.log("Security test - Decoded:",decoded)}}document.addEventListener("DOMContentLoaded",()=>{new TapMergeGame});